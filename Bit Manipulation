Problem 1 : Given an array of integers A, every element appears twice except for one. Find that single one.

Solution : Using XOR Bit operaor here.
XOR will return 1 only on two different bits. So if two numbers are the same, XOR will return 0.
Finally, there is only one number left.
A ^ A = 0 and A ^ B ^ A = B.
So, all even occurences will cancel out using XOR.

Code :

public class Solution {
    
    public int singleNumber(final int[] A) {
        int res = 0;
        for (int i = 0; i < A.length; i++)
        {
            res = res ^ A[i];
        }
        
        return res;
    }
    
    public static void main(String args[])
    {
        Solution obj = new Solutions();
        int A[] = {}; //Input
        int res = obj.singleNumber(A);
    }
}


Problem 2 : Write a function that takes an integer and returns the number of 1 bits it has.

Solution : Using the right shift operator and go every bits.

Code :

public class Solution {
    public int numSetBits(int A) {
        int numOfOnes = 0;
        while(A!=0)
        {
            numOfOnes += (A & 1);
            A = A>>1;
        }
        return numOfOnes;
    }
    
    public static void main(String args[])
    {
        Solution obj = new Solutions();
        int A = 10; //Input
        int res = obj.numSetBits(A);
    }
}
